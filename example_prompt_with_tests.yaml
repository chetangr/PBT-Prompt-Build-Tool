name: "Email Classifier"
version: "1.0"
model: "claude"
description: |
  Classifies emails into categories: support, sales, billing, or spam.
  Returns structured JSON with classification and confidence score.

template: |
  Classify this email into one of these categories: support, sales, billing, spam
  
  Email content:
  {{ email_content }}
  
  Respond with JSON in this format:
  {"category": "support|sales|billing|spam", "confidence": 0.95, "reason": "brief explanation"}

# Method 1: Manual Test Cases (Recommended for important scenarios)
tests:
  - name: "support_request"
    description: "Customer asking for help with product feature"
    inputs:
      email_content: |
        Hi there,
        I'm having trouble connecting my device to WiFi. I've tried restarting
        both my device and router but it's still not working. The error message
        says "Authentication failed". Can you help me troubleshoot this?
        Thanks,
        Sarah
    expected_output: |
      {"category": "support", "confidence": 0.9, "reason": "technical issue requiring assistance"}
    criteria: "Should classify as support with high confidence and mention technical nature"
    
  - name: "sales_inquiry"
    description: "Potential customer asking about pricing"
    inputs:
      email_content: |
        Hello,
        I'm interested in your premium plan for my small business. We have about
        15 employees. Could you send me pricing information and let me know what
        features are included? Also, do you offer any discounts for annual billing?
        Best regards,
        Mike Chen
    expected_output: |
      {"category": "sales", "confidence": 0.95, "reason": "pricing inquiry from potential customer"}
    criteria: "Should classify as sales with very high confidence"
    
  - name: "billing_issue"
    description: "Existing customer with payment problem"
    inputs:
      email_content: |
        My credit card was charged twice last month for my subscription. I can see
        two charges of $29.99 on my statement from your company. Please investigate
        and refund the duplicate charge. My account email is john@example.com.
        Account ID: ACC-12345
    expected_output: |
      {"category": "billing", "confidence": 0.9, "reason": "duplicate charge complaint"}
    criteria: "Should classify as billing with high confidence and identify payment issue"
    
  - name: "spam_detection"
    description: "Obviously spammy promotional email"
    inputs:
      email_content: |
        CONGRATULATIONS!!! You've WON $1,000,000 in our lottery!
        Click here NOW to claim your prize: http://suspicious-link.com
        This offer expires in 24 hours! Act fast!
        Send your SSN and bank details to claim.
    expected_output: |
      {"category": "spam", "confidence": 0.98, "reason": "suspicious promotional content with unrealistic claims"}
    criteria: "Should classify as spam with very high confidence"
    
  - name: "edge_case_empty"
    description: "Edge case with minimal content"
    inputs:
      email_content: "Hi"
    expected_output: |
      {"category": "support", "confidence": 0.3, "reason": "insufficient information"}
    criteria: "Should handle minimal input gracefully with low confidence"

# Method 2: Automated Test Generation Parameters
test_generation:
  enabled: true
  num_tests: 10
  test_types:
    - "functional"     # Normal use cases
    - "edge_case"      # Boundary conditions
    - "performance"    # Quality and consistency
  
  # Custom instructions for test generation
  generation_instructions: |
    Generate diverse email examples including:
    - Customer support requests (technical issues, how-to questions)
    - Sales inquiries (pricing, features, demos)
    - Billing issues (payment problems, refunds, subscription changes)
    - Spam emails (promotional, phishing, suspicious links)
    - Edge cases (very short emails, unusual formatting, multiple topics)

# Method 3: Test Scenarios (Groups of related tests)
test_scenarios:
  - name: "customer_support_scenarios"
    description: "Various customer support request types"
    tests:
      - technical_issues
      - feature_questions
      - account_access_problems
      
  - name: "sales_scenarios" 
    description: "Different sales and pre-sales inquiries"
    tests:
      - pricing_requests
      - feature_comparisons
      - demo_requests
      
  - name: "edge_cases"
    description: "Boundary conditions and unusual inputs"
    tests:
      - empty_content
      - very_long_emails
      - mixed_languages
      - malformed_text

# Method 4: Performance Benchmarks
performance_tests:
  - name: "consistency_check"
    description: "Same input should produce consistent results"
    runs: 5
    inputs:
      email_content: "I need help with my password reset"
    success_criteria:
      - "All runs classify as 'support'"
      - "Confidence scores within 0.1 range"
      - "Response time under 3 seconds"
      
  - name: "confidence_calibration"
    description: "Confidence scores should match actual accuracy"
    sample_size: 50
    success_criteria:
      - "High confidence (>0.9) predictions are 95%+ accurate"
      - "Low confidence (<0.5) predictions flag for human review"

# Method 5: Integration Tests (Test with real data)
integration_tests:
  - name: "production_sample"
    description: "Test with anonymized production email samples"
    data_source: "data/production_emails_sample.json"
    expected_accuracy: 0.85
    
# Evaluation Configuration
evaluation:
  judge_model: "claude"  # Model to evaluate outputs
  scoring_criteria:
    accuracy: 0.4      # 40% weight on correct classification
    confidence: 0.3    # 30% weight on appropriate confidence
    reasoning: 0.2     # 20% weight on explanation quality
    format: 0.1        # 10% weight on JSON format compliance
    
  pass_threshold: 0.7  # Overall score needed to pass
  
# Test Execution Settings
execution:
  parallel: true          # Run tests in parallel
  timeout: 30            # Max seconds per test
  retries: 2             # Retry failed tests
  save_outputs: true     # Save all outputs for analysis