"""
test_syntax_error_converted.py - PBT-converted agent workflow from test_syntax_error.py

This file was generated by PBT (Prompt Build Tool) and contains AI agent
functions that have been converted to use PBT's prompt management system.

PBT provides:
- Version-controlled prompt templates in YAML format
- Testable and reusable prompt components
- Multi-model support (Claude, GPT-4, etc.)
- Automatic environment variable management
- Professional documentation and testing

Author: PBT Generated
Generated by: PBT (Prompt Build Tool)
Documentation: https://github.com/your-org/prompt-build-tool

Usage:
    Ensure you have a .env file with your API keys:
    - ANTHROPIC_API_KEY=your-anthropic-key
    - OPENAI_API_KEY=your-openai-key
    
    Run the functions directly or integrate into your workflow.

Dependencies:
    - pbt (Prompt Build Tool)
    - anthropic (for Claude models)
    - openai (for GPT models)
"""

import openai
from pbt.runtime import PromptRunner

# =============================================================================
# PBT (Prompt Build Tool) Integration
# =============================================================================
# The following PromptRunner instances load YAML prompt templates from the
# agents/ directory. Each runner manages a specific prompt template and
# handles LLM communication through the PBT runtime.

# Initialize PBT PromptRunner instances
# Runner for bad prompt template
bad_runner = PromptRunner("agents/bad.prompt.yaml")

# =============================================================================

def bad_agent(content):
    """
    Bad Agent - AI agent for bad operations using PBT prompt templates

    This function is part of a PBT (Prompt Build Tool) workflow and provides
    ai agent for bad operations using pbt prompt templates. It integrates with PBT's prompt management system
    for consistent, testable, and version-controlled prompt execution.

    Args:
        content (str): The main content to be processed by the prompt

    Returns:
        str: The processed output from the LLM model
    
    Raises:
        ValueError: If required parameters are missing or invalid
        RuntimeError: If the PBT runtime encounters an error
    
    Example:
        >>> result = bad_agent(content="Sample content to process")
        >>> print(result)
    
    Note:
        This function requires proper PBT configuration and valid API keys.
        See the project documentation for setup instructions.
    """
    # Prepare input variables for the PBT prompt template
    # Each variable corresponds to a placeholder in the YAML template
    variables = {"content": content}
    
    # Execute the prompt using PBT runtime
    # This loads the template from agents/bad.prompt.yaml and processes it
    # with the configured LLM model (Claude, GPT-4, etc.)
    return bad_runner.run(variables)